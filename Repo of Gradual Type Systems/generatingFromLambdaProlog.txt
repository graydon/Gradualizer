Soon to be done: read lambda-prolog from files and not as input strings.

At the moment, the following queries have generated the repo. 

fromLambdaProlog (signatureOf stlc) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1."

fromLambdaProlog (signatureOf stlc_unit) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1. typeOf (unit) (unitType)."

fromLambdaProlog (signatureOf stlc_sum) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1. typeOf (case E R1 R2) T :- typeOf E (plus T1 T2), (pi x\\ (typeOf x T1 => typeOf (R1 x) T)), (pi x\\ (typeOf x T2 => typeOf (R2 x) T)). typeOf (inl T2 E) (plus T1 T2) :- typeOf E T1. typeOf (inr T1 E) (plus T1 T2) :- typeOf E T2."

fromLambdaProlog (signatureOf stlc_ref) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1. typeOf (ref E) (refType T) :- typeOf E T. typeOf (deref E) T :- typeOf E (refType T). typeOf (assign E1 E2) (unitType) :- typeOf E1 (refType T), typeOf E2 T."

fromLambdaProlog (signatureOf stlc_pairs) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1. typeOf (pair E1 E2) (pairType T1 T2) :- typeOf E1 T1, typeOf E2 T2. typeOf (fst E) T1 :- typeOf E (pairType T1 T2). typeOf (snd E) T2 :- typeOf E (pairType T1 T2)."

fromLambdaProlog (signatureOf stlc_rec) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1. typeOf (rec3 F1 E1 F2 E2 F3 E3) (rec3Type F1 T1 F2 T2 F3 T3) :- typeOf E1 T1, typeOf E2 T2, typeOf E3 T3. typeOf (proj1 E F) T :- typeOf E (rec3Type F T F2 T2 F3 T3). typeOf (proj2 E F) T :- typeOf E (rec3Type F1 T1 F T F3 T3). typeOf (proj3 E F) T :- typeOf E (rec3Type F1 T1 F2 T2 F T)."

fromLambdaProlog (signatureOf stlc_lists) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1. typeOf (isnil T E) bool :- typeOf E (list T). typeOf (cons T E1 E2) (list T) :- typeOf E1 T, typeOf E2 (list T). typeOf (head T E) T :- typeOf E (list T). typeOf (tail T E) T :- typeOf E (list T)."

fromLambdaProlog (signatureOf stlc_letR) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1. typeOf (let E R) T2 :- typeOf E T1, (pi x\\ (typeOf x T1 => typeOf (R x) T2))."

fromLambdaProlog (signatureOf stlc_fix) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1. typeOf (fix E) T :- typeOf E (arrow T T)."

fromLambdaProlog (signatureOf stlc_exc) "typeOf (abs T1 R) (arrow T1 T2) :- (pi x\\ (typeOf x T1 => typeOf (R x) T2)). typeOf (app E1 E2) T2 :- typeOf E1 (arrow T1 T2), typeOf E2 T1.  typeOf (raise T E) T :- typeOf E (excType ). typeOf (try E1 E2) T :- typeOf E1 T, typeOf E2 (excTypeFun T)."
